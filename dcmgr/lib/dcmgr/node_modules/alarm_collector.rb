# -*- coding: utf-8 -*-
require 'isono'

module Dcmgr
  module NodeModules
    class AlarmCollector < Isono::NodeModules::Base
      include Dcmgr::Logger

      initialize_hook do
        app = Isono::Rack::ObjectMethod.new(myinstance)
        rpc = Isono::NodeModules::RpcChannel.new(node)
        rpc.register_endpoint('alarm-collector', Isono::Rack.build do
                                use Isono::Rack::Sequel
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def get_log_alarms(node_id)
        instance_uuids = Models::HostNode.online_nodes.filter(:node_id => node_id).first.instances.collect{|i| i.canonical_uuid}
        logger.debug("instance ids on #{node_id}: #{instance_uuids}")

        conditions = {:metric_name =>Dcmgr::Constants::Alarm::LOG_METRICS, :resource_id => instance_uuids }
        alarms = Models::Alarm.filter(conditions).alives.all.map { |alarm|
          alarm.to_hash
        }
        logger.debug("monitoring list: #{alarms}")

        alarms
      end

    end
  end
end
