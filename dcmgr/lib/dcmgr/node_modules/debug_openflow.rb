# -*- coding: utf-8 -*-

module Dcmgr::NodeModules

  class DebugOpenFlow < Isono::NodeModules::Base
    include Isono::NodeModules
    include Dcmgr::Logger
    include Dcmgr::EdgeNetworking::OpenFlow::OpenFlowConstants

    initialize_hook do
      EM.defer {
        myinstance.broadcast.subscribe('debug/vnet') do |handle,args|
          # next if myinstance.controller.nil?
          myinstance.broadcast.reply(handle, myinstance.method(handle[:command]).call(args))
        end
      }
    end

    terminate_hook do
    end

    def switch_info(args)
      result = { :type => 'openflow' }
      result
    end

    def tunnels(args)
      result = []

      switch = controller.switches.first[1]

      switch.ports.each { |port_id,port|
        next unless port.port_type == PORT_TYPE_TUNNEL

        result << {
          :port_number => port.port_info.number,
          # :network => port.network.canonical_uuid,
          :name => port.port_info.name,
          :remote_node => "hva.#{port.port_info.name[/^t-([a-z0-9]*)-[0-9]*$/, 1]}",
          :network_id => port.port_info.name[/^t-[a-z0-9]*-([0-9]*)$/, 1]
        }
      }

      result
    end

    def broadcast
      @broadcast ||= Ext::BroadcastChannel.new(@node)
    end

    def controller
      @@controller
    end

    def self.register_controller(controller)
      @@controller = controller
    end
  end
end
