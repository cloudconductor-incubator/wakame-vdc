# -*- coding: utf-8 -*-
require 'isono'
require 'ipaddress'

require 'vnet_api_client'

module Dcmgr
  module NodeModules
    class VnetCollector < Isono::NodeModules::Base
      include Isono::NodeModules
      include Dcmgr::Logger

      initialize_hook do
        endpoint = Dcmgr::Configurations.dcmgr.features.vnet_endpoint
        port = Dcmgr::Configurations.dcmgr.features.vnet_endpoint_port

        VNetAPIClient.uri = "http://#{endpoint}:#{port}"

        app = Isono::Rack::ObjectMethod.new(myinstance)
        job = Isono::NodeModules::JobChannel.new(node)
        job.register_endpoint('vnet-collector', Isono::Rack.build do
                                use Isono::Rack::Sequel
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def schedule_vifs(instance_uuid)
        instance = Models::Instance[instance_uuid]

        ret = []

        instance.network_vif.each do |vif|
          if_uuid = vif.canonical_uuid.sub(/v/, '')
          r = VNetAPIClient::Interface.create(
            uuid: if_uuid,
            network_uuid: vif.network.canonical_uuid,
            mac_address: vif.pretty_mac_addr,
            ipv4_address: vif.ip.first.ipv4_s,
            port_name: if_uuid
          )

          ret << r["uuid"]
        end

        ret
      end
    end
  end
end
