#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

load File.expand_path('../../config/boot.rb', __FILE__)

require 'thor'
require 'thor/group'
require 'erb'
# load model classes under app/models.
require 'autoload'

require File.expand_path('../../config/initializers/timezone', __FILE__)

class RootCli < Thor
  register(Cli::AccountCli, Cli::AccountCli.namespace, "account sub-command", "Operations for accounts")
  register(Cli::UserCli, Cli::UserCli.namespace, "user sub-command", "Operations for users")
end

module TxMode
  module Bulk
    def in_loop
      BaseNew.db.transaction do
        super
      end
    end
  end
  
  module Each
    def loop_eval(str)
      BaseNew.db.transaction do
        super
      end
    end
  end
end

module ExitAtError
  def loop_eval(str)
    begin
      # Ensure Thor to raise exception.
      ENV['THOR_DEBUG']='1'
      # "--debug" flag is only available in Thor 0.14.x.
      super("--debug #{str}")
    rescue ::Exception => e
      STDERR.puts "ERROR: #{e.message}"
      if $options[:errexit]
        $exitcode=1
        throw(:ripl_exit)
      end
    end
  end
end

module GuiManageShell

  def loop_eval(str)
    args = Shellwords.shellsplit(str)
    if !args.empty?
      RootCli.start(args.dup)
    end
  end

  def print_result(result)
    # do nothing from ripl.
  end
  
end

require File.expand_path('../../config/initializers/secret_token', __FILE__)
require File.expand_path('../../config/initializers/sequel', __FILE__)

require 'optparse'

TX_MODES=['each', 'none', 'bulk'].freeze
$options = {:tx_mode=>TX_MODES.first, :errexit=>false}

argv = ARGV.dup
OptionParser.new { |o|
  o.banner += " [TASK [options]]"
  o.on('--tx TYPE', '--tx-mode=TYPE', "Set transaction mode (default: #{TX_MODES.first}): #{TX_MODES.join(', ')}") { |v|
    if TX_MODES.member?(v)
      $options[:tx_mode]=v.to_sym
    else
      abort("Unknown tx-mode value: #{v}")
    end
  }
  o.on('-e', "Exit interactive loop at error (default: #{$options[:errexit]})") {
    $options[:errexit]=true
  }
  o.on_tail('-h', '--help', 'Show this message') do
    puts o.help
    RootCli.start(["-h"])
    exit
  end
}.order!(argv)

if !argv.empty?
  # Ensure to raise exception from Thor v0.14.x.
  argv = argv + ['--debug']
  begin
    BaseNew.db.transaction do
      RootCli.start(argv)
    end
  rescue => e
    e = Cli::Error.new(e,101) unless e.is_a?(Cli::Error)
    STDERR.puts "ERROR: #{e.message}"
    if e.respond_to?(:exit_code)
      exit(e.exit_code)
    else
      exit(1)
    end
  end
else
  # Interactive shell mode
  require 'ripl'
  require 'shellwords'
  
  $exitcode = 0

  Ripl::Shell.include GuiManageShell
  if $options[:tx_mode].to_sym == :each
    Ripl::Shell.include TxMode::Each
  else
    Ripl::Shell.include TxMode::Bulk
  end
  Ripl::Shell.include ExitAtError
  Ripl::History.module_eval {
    # disable to write history file. Ripl::History is included anyway.
    def write_history; end
  }
  Ripl::Shell.create(:prompt => 'gui-manage>> ',
                     :result_prompt => '',
                     :name   => 'gui-manage',
                     :irbrc  => nil,
                     :readline=>true,
                     ).loop
  ::Kernel.exit($exitcode)
end
